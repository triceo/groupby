/*
 * Copyright 2010 Red Hat, Inc. and/or its affiliates.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.optaplanner.examples.cloudbalancing.solver;
    dialect "java"

import org.optaplanner.core.api.score.buildin.hardsoft.HardSoftScoreHolder;

import org.optaplanner.examples.cloudbalancing.domain.CloudBalance;
import org.optaplanner.examples.cloudbalancing.domain.CloudComputer;
import org.optaplanner.examples.cloudbalancing.domain.CloudProcess;
import org.optaplanner.examples.cloudbalancing.GroupKey;

global HardSoftScoreHolder scoreHolder;

rule R1 when
    CloudProcess($key: computer)
    not( GroupKey(key == $key) )
then
    insert( new GroupKey( $key ) );
end

rule R2 when
    $k: GroupKey( $key : key )
    not( CloudProcess( computer == $key ) )
then
    delete ( $k );
end

rule R3 when
    GroupKey( $computer : key )
    accumulate (
        CloudProcess( $requirement: requiredCpuPower, computer == $computer );
                $sum : sum($requirement);
                $sum > ((CloudComputer)$computer).getCpuPower()
    )
then
    scoreHolder.addHardConstraintMatch(kcontext, ((CloudComputer)$computer).getCpuPower() - $sum);
end
